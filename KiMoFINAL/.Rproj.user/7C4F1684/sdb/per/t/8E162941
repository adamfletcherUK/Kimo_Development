{
    "contents" : "# TCGA script\n\n#load StringR package\nlibrary(\"stringr\", lib.loc=\"~/Library/R/3.1/library\")\nlibrary(\"plyr\", lib.loc=\"~/Library/R/3.1/library\")\n\n# match definitive gene names with GENBANK\ngenbank <- read.csv ( file = 'SOURCE_DEFINITIVE_GENBANK_TRIM.csv')\n\n# merge with kinase gene names with motif data\nnames   <- read.csv (file = 'SOURCE_DEFINITIVEGenename_TRIM.csv') \ngenbankkinases = merge(genbank, names, by = 'Gene', nomatch = 0)\nwrite.csv (genbankkinases, 'check.csv')\n#check how many unique kinases\nuniqkinase <- genbankkinases$Gene\nunique(uniqkinase)\n# this displays 420 unique kinase names in TCGA\n\n# extract motifs as per Manning et al\nHRDmotifs  <- as.vector(genbankkinases$HRDmotif)\nVAIKmotifs <- as.vector(genbankkinases$VAIKmotif)\nDFGmotifs  <- as.vector(genbankkinases$DFGmotif)\n\n# count number of occurences of motif in each seq (using StringR package)\nnumberofDFG  <- str_count(genbankkinases$Protein_Seq,  DFGmotifs)\nnumberofVAIK <- str_count(genbankkinases$Protein_Seq, VAIKmotifs)\nnumberofHRD  <- str_count(genbankkinases$Protein_Seq,  HRDmotifs)\ngenbankkinases$numberofVAIK <- numberofVAIK\ngenbankkinases$numberofHRD  <- numberofHRD\ngenbankkinases$numberofDFG  <- numberofDFG\n\n\n# remove any entry with number of VAIK or HRD or DFG = 0\ngenbankkinases <- subset(genbankkinases, (numberofVAIK != 0))\ngenbankkinases <- subset(genbankkinases, (numberofHRD  != 0))\ngenbankkinases <- subset(genbankkinases, (numberofDFG  != 0))\n\n# now need to visually inspect all kinases that have more than 1 of each motif, so that can call which one\n# SOURCE_motif2use is a file with the correct motif to use when there are multiple\nmotifToUse     <- read.csv ('SOURCE_motif2use.csv')\ngenbankkinases <- merge    (genbankkinases, motifToUse, by = 'f')\n\n#clean up genbankkinases\ncolnames(genbankkinases)[2] <- \"Gene\"\ncolnames(genbankkinases)[3] <- \"Length\"\ncolnames(genbankkinases)[4] <- \"Protein_Seq\"\ncolnames(genbankkinases)[6] <- \"VAIKmotif\"\ncolnames(genbankkinases)[7] <- \"HRDmotif\"\ncolnames(genbankkinases)[8] <- \"DFGmotif\"\n\n\n#locate all motifs\nHRDmotifs  <- as.vector(genbankkinases$HRDmotif)\nVAIKmotifs <- as.vector(genbankkinases$VAIKmotif)\nDFGmotifs  <- as.vector(genbankkinases$DFGmotif)\n\n# don't need locate all for VAIK as there is only one gene with 2 vaik motifs (map4k1) and the valid one is the first\nfirstVAIK <- str_locate(genbankkinases$Protein_Seq, VAIKmotifs)\nfirstVAIK <- as.data.frame(firstVAIK)\ngenbankkinases$firstVAIK <- as.numeric(firstVAIK$start)\ngenbankkinases$actual_lysine <- as.numeric(genbankkinases$firstVAIK + 3)\n\n#locate all HRD\nfirstHRD <- str_locate(genbankkinases$Protein_Seq, HRDmotifs)\nfirstHRD <- as.data.frame(firstHRD)\ngenbankkinases$firstHRD <- firstHRD$start\nfirstHRD <- as.numeric(firstHRD$start)\nendofstring = as.numeric(firstHRD +1000000)\n\nbeyondfirstHRD <- substr(genbankkinases$Protein_Seq, firstHRD + 1, endofstring)\n\nsecondHRD <- str_locate(beyondfirstHRD, HRDmotifs)\nsecondHRD <- as.data.frame(secondHRD)\ngenbankkinases$secondHRD <- secondHRD$start\nsecondHRD = as.numeric(genbankkinases$secondHRD + firstHRD)\ngenbankkinases$secondHRD <- secondHRD\n\nbeyondsecondHRD <- substr(genbankkinases$Protein_Seq, secondHRD + 1, endofstring)\n\nthirdHRD <- str_locate(beyondsecondHRD, HRDmotifs)\nthirdHRD <- as.data.frame(thirdHRD)\ngenbankkinases$thirdHRD <- thirdHRD$start\nthirdHRD = as.numeric(genbankkinases$thirdHRD + secondHRD)\ngenbankkinases$thirdHRD <- thirdHRD\n\n#for DFG\nfirstDFG <- str_locate(genbankkinases$Protein_Seq, DFGmotifs)\nfirstDFG <- as.data.frame(firstDFG)\ngenbankkinases$firstDFG <- firstDFG$start\nfirstDFG <- as.numeric(firstDFG$start)\nendofstring = as.numeric(firstDFG +1000000)\n\nbeyondfirstDFG <- substr(genbankkinases$Protein_Seq, firstDFG + 1, endofstring)\n\nsecondDFG <- str_locate(beyondfirstDFG, DFGmotifs)\nsecondDFG <- as.data.frame(secondDFG)\ngenbankkinases$secondDFG <- secondDFG$start\nsecondDFG = as.numeric(genbankkinases$secondDFG + firstDFG)\ngenbankkinases$secondDFG <- secondDFG\n\nbeyondsecondDFG <- substr(genbankkinases$Protein_Seq, secondDFG + 1, endofstring)\n\nthirdDFG <- str_locate(beyondsecondDFG, DFGmotifs)\nthirdDFG <- as.data.frame(thirdDFG)\ngenbankkinases$thirdDFG <- thirdDFG$start\nthirdDFG = as.numeric(genbankkinases$thirdDFG + secondDFG)\ngenbankkinases$thirdDFG <- thirdDFG\n\n# choose correct HRD\ngenbankkinases$actual_HRD_H <- ifelse (genbankkinases$HRDtouse == '1', genbankkinases$firstHRD, ifelse (genbankkinases$HRDtouse == '2', genbankkinases$secondHRD , genbankkinases$thirdHRD))\ngenbankkinases$actual_HRD_R <- genbankkinases$actual_HRD_H + 1\ngenbankkinases$actual_HRD_D <- genbankkinases$actual_HRD_H + 2\n\n\n# choose correct DFG\n\ngenbankkinases$actual_DFG_D <- ifelse (genbankkinases$DFGtouse == '1', genbankkinases$firstDFG, ifelse (genbankkinases$DFGtouse == '2', genbankkinases$secondDFG , genbankkinases$thirdDFG))\ngenbankkinases$actual_DFG_F <- genbankkinases$actual_DFG_D + 1\ngenbankkinases$actual_DFG_G <- genbankkinases$actual_DFG_D + 2\n\n\n\n# find APE motif\nAPEfragstart <- genbankkinases$actual_DFG_G + 10\ngenbankkinases$APEfragstart <- as.numeric(APEfragstart)\nAPEfragend <- genbankkinases$actual_DFG_G + 70\ngenbankkinases$APEfragend <- as.numeric(APEfragend)\nAPEfrag <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APEfragstart, genbankkinases$APEfragend )\ngenbankkinases$APEfrag <- APEfrag\n\n# find APE\nnumAPE <- str_count(APEfrag,  'APE')\ngenbankkinases$numAPE <- as.numeric(numAPE)\nAPELoc <- str_locate(APEfrag, 'APE')\nAPELoc <- as.data.frame(APELoc)\ngenbankkinases$APELoc <- as.numeric(APELoc$start)\ngenbankkinases$locAPEprotein <- genbankkinases$APEfragstart + genbankkinases$APELoc - 1\n\n# find PE\nnumPE <- str_count(APEfrag,  'PE')\ngenbankkinases$numPE <- as.numeric(numPE)\nPELoc <- str_locate(APEfrag, 'PE')\nPELoc <- as.data.frame(PELoc)\ngenbankkinases$PELoc <- as.numeric(PELoc$start)\ngenbankkinases$locPEprotein <- genbankkinases$APEfragstart + genbankkinases$PELoc - 2 # minus 2 as PE is 1 further back \n\n# find GTxxxxxxE\nnumGTx6E <- str_count(APEfrag,  'GT[A-Z]{6}E')\ngenbankkinases$numGTx6E  <- as.numeric(numGTx6E)\nGTx6ELoc <- str_locate(APEfrag, 'GT[A-Z]{6}E')\nGTx6ELoc <- as.data.frame(GTx6ELoc)\ngenbankkinases$GTx6ELoc <- as.numeric(GTx6ELoc$start)\ngenbankkinases$locGTx6Eprotein <- genbankkinases$APEfragstart + genbankkinases$GTx6ELoc + 5\n\n# find GTxxxxxNE\nnumGTx5NE <- str_count(APEfrag,  'GT[A-Z]{5}NE')\ngenbankkinases$numGTx5NE  <- as.numeric(numGTx5NE)\nGTx5NELoc <- str_locate(APEfrag, 'GT[A-Z]{5}NE')\nGTx5NELoc <- as.data.frame(GTx5NELoc)\ngenbankkinases$GTx5NELoc <- as.numeric(GTx5NELoc$start)\ngenbankkinases$locGTx5NEprotein <- genbankkinases$APEfragstart + genbankkinases$GTx5NELoc + 5\n\n# find GTxxxxxxD\nnumGTx6D <- str_count(APEfrag,  'GT[A-Z]{6}D')\ngenbankkinases$numGTx6D  <- as.numeric(numGTx6D)\nGTx6DLoc <- str_locate(APEfrag, 'GT[A-Z]{6}D')\nGTx6DLoc <- as.data.frame(GTx6DLoc)\ngenbankkinases$GTx6DLoc <- as.numeric(GTx6DLoc$start)\ngenbankkinases$locGTx6Dprotein <- genbankkinases$APEfragstart + genbankkinases$GTx6DLoc + 5\n\n# find AxE\nnumAxE <- str_count(APEfrag,  'A[A-Z]E')\ngenbankkinases$numAxE <- as.numeric(numAxE)\nAxELoc <- str_locate(APEfrag, 'A[A-Z]E')\nAxELoc <- as.data.frame(AxELoc)\ngenbankkinases$AxELoc <- as.numeric(AxELoc$start)\ngenbankkinases$locAxEprotein <- genbankkinases$APEfragstart + genbankkinases$AxELoc - 1\n\n# find APD\nnumAPD <- str_count(APEfrag,  'APD')\ngenbankkinases$numAPD  <- as.numeric(numAPD)\nAPDLoc <- str_locate(APEfrag, 'APD')\nAPDLoc <- as.data.frame(APDLoc)\ngenbankkinases$APDLoc <- as.numeric(APDLoc$start)\ngenbankkinases$locAPDprotein <- genbankkinases$APEfragstart + genbankkinases$APDLoc - 1\n\n# find PPD\nnumPPD <- str_count(APEfrag,  'PPD')\ngenbankkinases$numPPD  <- as.numeric(numPPD)\nPPDLoc <- str_locate(APEfrag, 'PPD')\nPPDLoc <- as.data.frame(PPDLoc)\ngenbankkinases$PPDLoc <- as.numeric(PPDLoc$start)\ngenbankkinases$locPPDprotein <- genbankkinases$APEfragstart + genbankkinases$PPDLoc - 1\n\n# find GTxxY\nnumGTxxY <- str_count(APEfrag,  'GT[A-Z]{2}Y')\ngenbankkinases$numGTxxY  <- as.numeric(numGTxxY)\nGTxxYLoc <- str_locate(APEfrag, 'GT[A-Z]{2}Y')\nGTxxYLoc <- as.data.frame(GTxxYLoc)\ngenbankkinases$GTxxYLoc <- as.numeric(GTxxYLoc$start)\ngenbankkinases$locGTxxYprotein <- genbankkinases$APEfragstart + genbankkinases$GTxxYLoc + 5\n\n# find PIR\nnumPIR <- str_count(APEfrag,  'PIR')\ngenbankkinases$numPIR  <- as.numeric(numPIR)\nPIRLoc <- str_locate(APEfrag, 'PIR')\nPIRLoc <- as.data.frame(PIRLoc)\ngenbankkinases$PIRLoc <- as.numeric(PIRLoc$start)\ngenbankkinases$locPIRprotein <- genbankkinases$APEfragstart + genbankkinases$PIRLoc + 4\n\n# find Gx7E\nnumGx7E <- str_count(APEfrag,  'G[A-Z]{7}E')\ngenbankkinases$numGx7E  <- as.numeric(numGx7E)\nGx7ELoc <- str_locate(APEfrag, 'G[A-Z]{7}E')\nGx7ELoc <- as.data.frame(Gx7ELoc)\ngenbankkinases$Gx7ELoc <- as.numeric(Gx7ELoc$start)\ngenbankkinases$locGx7Eprotein <- genbankkinases$APEfragstart + genbankkinases$Gx7ELoc + 5\n\n# find YxAP (captures MAPKAPK5)\nnumYxAP <- str_count(APEfrag,  'Y[A-Z]{1}AP')\ngenbankkinases$numYxAP  <- as.numeric(numYxAP)\nYxAPLoc <- str_locate(APEfrag, 'Y[A-Z]{1}AP')\nYxAPLoc <- as.data.frame(YxAPLoc)\ngenbankkinases$YxAPLoc <- as.numeric(YxAPLoc$start)\ngenbankkinases$YxAPLocprotein <- genbankkinases$APEfragstart + genbankkinases$YxAPLoc + 1\n\n# find WYxxPR (captures MAPK4 and MAPK6)\nnumWYxxPR <- str_count(APEfrag,  'WY[A-Z]{2}PR')\ngenbankkinases$numWYxxPR  <- as.numeric(numWYxxPR)\nWYxxPRLoc <- str_locate(APEfrag, 'WY[A-Z]{2}PR')\nWYxxPRLoc <- as.data.frame(WYxxPRLoc)\ngenbankkinases$WYxxPRLoc <- as.numeric(WYxxPRLoc$start)\ngenbankkinases$WYxxPRLocprotein <- genbankkinases$APEfragstart + genbankkinases$WYxxPRLoc + 2\n\n\n# choose correct APE\ngenbankkinases$loc_actual_APE_A <- ifelse (genbankkinases$numAPE <1, genbankkinases$locGTx5NEprotein, genbankkinases$locAPEprotein)\ngenbankkinases$loc_actual_APE_B <- genbankkinases$loc_actual_APE_A\ngenbankkinases$loc_actual_APE_C   <- ifelse (genbankkinases$loc_actual_APE_A %in% NA, genbankkinases$locGTx6Eprotein, genbankkinases$loc_actual_APE_B)\ngenbankkinases$loc_actual_APE_D <- genbankkinases$loc_actual_APE_C \ngenbankkinases$loc_actual_APE_E   <- ifelse (genbankkinases$loc_actual_APE_C %in% NA, genbankkinases$locPEprotein, genbankkinases$loc_actual_APE_D)\ngenbankkinases$loc_actual_APE_F <- genbankkinases$loc_actual_APE_E\ngenbankkinases$loc_actual_APE_G   <- ifelse (genbankkinases$loc_actual_APE_E %in% NA, genbankkinases$locGTx6Dprotein, genbankkinases$loc_actual_APE_F)\ngenbankkinases$loc_actual_APE_H <- genbankkinases$loc_actual_APE_G\ngenbankkinases$loc_actual_APE_I   <- ifelse (genbankkinases$loc_actual_APE_G %in% NA, genbankkinases$locGTxxYprotein, genbankkinases$loc_actual_APE_H)\ngenbankkinases$loc_actual_APE_J <- genbankkinases$loc_actual_APE_I\ngenbankkinases$loc_actual_APE_K   <- ifelse (genbankkinases$loc_actual_APE_I %in% NA, genbankkinases$locAPDprotein, genbankkinases$loc_actual_APE_J)\ngenbankkinases$loc_actual_APE_L  <- genbankkinases$loc_actual_APE_K\ngenbankkinases$loc_actual_APE_M   <- ifelse (genbankkinases$loc_actual_APE_K %in% NA, genbankkinases$locPPDprotein, genbankkinases$loc_actual_APE_L)\ngenbankkinases$loc_actual_APE_N  <- genbankkinases$loc_actual_APE_M\ngenbankkinases$loc_actual_APE_O   <- ifelse (genbankkinases$loc_actual_APE_M %in% NA, genbankkinases$WYxxPRLocprotein, genbankkinases$loc_actual_APE_N)\ngenbankkinases$loc_actual_APE_P <- genbankkinases$loc_actual_APE_O\ngenbankkinases$loc_actual_APE_Q   <- ifelse (genbankkinases$loc_actual_APE_O %in% NA, genbankkinases$locAxEprotein, genbankkinases$loc_actual_APE_P)\ngenbankkinases$loc_actual_APE_R <- genbankkinases$loc_actual_APE_Q\ngenbankkinases$loc_actual_APE_S   <- ifelse (genbankkinases$loc_actual_APE_Q %in% NA, genbankkinases$locPIRprotein, genbankkinases$loc_actual_APE_R)\ngenbankkinases$loc_actual_APE_T <- genbankkinases$loc_actual_APE_S\ngenbankkinases$loc_actual_APE_U   <- ifelse (genbankkinases$loc_actual_APE_S %in% NA, genbankkinases$locGx7Eprotein, genbankkinases$loc_actual_APE_T)\ngenbankkinases$loc_actual_APE_V <- genbankkinases$loc_actual_APE_U\ngenbankkinases$loc_actual_APE   <- ifelse (genbankkinases$loc_actual_APE_U %in% NA, genbankkinases$YxAPLocprotein, genbankkinases$loc_actual_APE_V)\n\n\ngenbankkinases$APE_m14loc   <- genbankkinases$loc_actual_APE - 14\ngenbankkinases$APE_m13loc   <- genbankkinases$loc_actual_APE - 13\ngenbankkinases$APE_m12loc   <- genbankkinases$loc_actual_APE - 12\ngenbankkinases$APE_m11loc   <- genbankkinases$loc_actual_APE - 11\ngenbankkinases$APE_m10loc   <- genbankkinases$loc_actual_APE - 10\ngenbankkinases$APE_m9loc   <- genbankkinases$loc_actual_APE - 9\ngenbankkinases$APE_m8loc   <- genbankkinases$loc_actual_APE - 8\ngenbankkinases$APE_m7loc   <- genbankkinases$loc_actual_APE - 7\ngenbankkinases$APE_m6loc   <- genbankkinases$loc_actual_APE - 6\ngenbankkinases$APE_m5loc   <- genbankkinases$loc_actual_APE - 5\ngenbankkinases$APE_m4loc   <- genbankkinases$loc_actual_APE - 4\ngenbankkinases$APE_m3loc   <- genbankkinases$loc_actual_APE - 3\ngenbankkinases$APE_m2loc   <- genbankkinases$loc_actual_APE - 2\ngenbankkinases$APE_m1loc   <- genbankkinases$loc_actual_APE - 1\ngenbankkinases$APE_A1loc   <- genbankkinases$loc_actual_APE\ngenbankkinases$APE_P1loc   <- genbankkinases$loc_actual_APE + 1\ngenbankkinases$APE_E1loc   <- genbankkinases$loc_actual_APE + 2\n\n\n\n\ngenbankkinases$APE_m14       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m14loc , genbankkinases$APE_m14loc)\ngenbankkinases$APE_m13       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m13loc , genbankkinases$APE_m13loc)\ngenbankkinases$APE_m12       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m12loc , genbankkinases$APE_m12loc)\ngenbankkinases$APE_m11       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m11loc , genbankkinases$APE_m11loc)\ngenbankkinases$APE_m10       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m10loc , genbankkinases$APE_m10loc)\ngenbankkinases$APE_m9       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m9loc , genbankkinases$APE_m9loc)\ngenbankkinases$APE_m8       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m8loc , genbankkinases$APE_m8loc)\ngenbankkinases$APE_m7       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m7loc , genbankkinases$APE_m7loc)\ngenbankkinases$APE_m6       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m6loc , genbankkinases$APE_m6loc)\ngenbankkinases$APE_m5       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m5loc , genbankkinases$APE_m5loc)\ngenbankkinases$APE_m4       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m4loc , genbankkinases$APE_m4loc)\ngenbankkinases$APE_m3       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m3loc , genbankkinases$APE_m3loc)\ngenbankkinases$APE_m2       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m2loc , genbankkinases$APE_m2loc)\ngenbankkinases$APE_m1       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m1loc , genbankkinases$APE_m1loc)\ngenbankkinases$APE_A1       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_A1loc , genbankkinases$APE_A1loc)\ngenbankkinases$APE_P1       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_P1loc , genbankkinases$APE_P1loc)\ngenbankkinases$APE_E1       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_E1loc , genbankkinases$APE_E1loc)\n\ngenbankkinases$APE_MOTIF <- paste(genbankkinases$APE_A1, genbankkinases$APE_P1, genbankkinases$APE_E1)\ngenbankkinases$PE_MOTIF <- paste(genbankkinases$APE_P1, genbankkinases$APE_E1)\n\n# if no G in APEm6 then look for G in APEm8 and then APEm9 and then A's in these positions\n\ngenbankkinases$correctedG_loc <- ifelse (genbankkinases$APE_m6 != 'G', genbankkinases$APE_m9loc, genbankkinases$APE_m6loc)\ngenbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)\n\ngenbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m5loc, genbankkinases$correctedG_loc)\ngenbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)\n\ngenbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m8loc, genbankkinases$correctedG_loc)\ngenbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)\n\ngenbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m10loc, genbankkinases$correctedG_loc)\ngenbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)\n\ngenbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m11loc, genbankkinases$correctedG_loc)\ngenbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)\n\ngenbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m7loc, genbankkinases$correctedG_loc)\ngenbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)\n\ngenbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG == 'G', genbankkinases$correctedG_loc, genbankkinases$APE_m6loc)\ngenbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)\n\n#end of kinase domain = APE + defined end\ngenbankkinases$endCAT <- as.numeric(genbankkinases$APE_E1loc)\n\n# find GxGxxG\nGxGfragstart <- genbankkinases$actual_lysine - 45\ngenbankkinases$GxGfragstart <- as.numeric(GxGfragstart)\n\n# NEED TO PUT THIS LINE IN FOR ALL MOTIF SEARCHES - TELLING THE FRAG TO START AT 1 IF MINUS NUMBER\ngenbankkinases$GxGfragstart <- ifelse(genbankkinases$GxGfragstart < 1, 1,genbankkinases$GxGfragstart )\n\nGxGfragend <- genbankkinases$actual_lysine - 4\ngenbankkinases$GxGfragend <- as.numeric(GxGfragend)\nGxGfrag <- str_sub(genbankkinases$Protein_Seq, genbankkinases$GxGfragstart, genbankkinases$GxGfragend )\ngenbankkinases$GxGfrag <- GxGfrag\n\n# find GxGxxG\nnumGxGxxG <- str_count(GxGfrag,  'G[A-Z]G[A-Z]{2}G')\ngenbankkinases$numGxGxxG <- as.numeric(numGxGxxG)\nGxGxxGLoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]{2}G')\nGxGxxGLoc <- as.data.frame(GxGxxGLoc)\ngenbankkinases$GxGxxGLoc <- as.numeric(GxGxxGLoc$start)\ngenbankkinases$locGxGxxGprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxxGLoc - 1\n\n# find GxGxF\nnumGxGxF <- str_count(GxGfrag,  'G[A-Z]G[A-Z]F')\ngenbankkinases$numGxGxF <- as.numeric(numGxGxF)\nGxGxFLoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]F')\nGxGxFLoc <- as.data.frame(GxGxFLoc)\ngenbankkinases$GxGxFLoc <- as.numeric(GxGxFLoc$start)\ngenbankkinases$locGxGxFprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxFLoc - 1\n\n# find GxGxY\nnumGxGxY <- str_count(GxGfrag,  'G[A-Z]G[A-Z]Y')\ngenbankkinases$numGxGxY <- as.numeric(numGxGxY)\nGxGxYLoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]Y')\nGxGxYLoc <- as.data.frame(GxGxYLoc)\ngenbankkinases$GxGxYLoc <- as.numeric(GxGxYLoc$start)\ngenbankkinases$locGxGxYprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxYLoc - 1\n\n# find GxFG\nnumGxFG <- str_count(GxGfrag,  'G[A-Z]FG')\ngenbankkinases$numGxFG <- as.numeric(numGxFG)\nGxFGLoc <- str_locate(GxGfrag, 'G[A-Z]FG')\nGxFGLoc <- as.data.frame(GxFGLoc)\ngenbankkinases$GxFGLoc <- as.numeric(GxFGLoc$start)\ngenbankkinases$locGxFGprotein <- genbankkinases$GxGfragstart + genbankkinases$GxFGLoc - 3\n#above is minus 3 rather than minus 1 to take account of the GxFG starting 2 on from GxGxxG\n\n# find GxGxxA\nnumGxGxxA <- str_count(GxGfrag,  'G[A-Z]G[A-Z]{2}A')\ngenbankkinases$numGxGxxA <- as.numeric(numGxGxxA)\nGxGxxALoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]{2}A')\nGxGxxALoc <- as.data.frame(GxGxxALoc)\ngenbankkinases$GxGxxALoc <- as.numeric(GxGxxALoc$start)\ngenbankkinases$locGxGxxAprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxxALoc - 1\n\n# find GxGxxS\nnumGxGxxS <- str_count(GxGfrag,  'G[A-Z]G[A-Z]{2}S')\ngenbankkinases$numGxGxxS <- as.numeric(numGxGxxS)\nGxGxxSLoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]{2}S')\nGxGxxSLoc <- as.data.frame(GxGxxSLoc)\ngenbankkinases$GxGxxSLoc <- as.numeric(GxGxxSLoc$start)\ngenbankkinases$locGxGxxSprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxxSLoc - 1\n\n# find SxGxxG\nnumSxGxxG <- str_count(GxGfrag,  'S[A-Z]G[A-Z]{2}G')\ngenbankkinases$numSxGxxG <- as.numeric(numSxGxxG)\nSxGxxGLoc <- str_locate(GxGfrag, 'S[A-Z]G[A-Z]{2}G')\nSxGxxGLoc <- as.data.frame(SxGxxGLoc)\ngenbankkinases$SxGxxGLoc <- as.numeric(SxGxxGLoc$start)\ngenbankkinases$locSxGxxGprotein <- genbankkinases$GxGfragstart + genbankkinases$SxGxxGLoc - 1\n\n# find GxxG\nnumGxxG <- str_count(GxGfrag,  'G[A-Z]{2}G')\ngenbankkinases$numGxxG <- as.numeric(numGxxG)\nGxxGLoc <- str_locate(GxGfrag, 'G[A-Z]{2}G')\nGxxGLoc <- as.data.frame(GxxGLoc)\ngenbankkinases$GxxGLoc <- as.numeric(GxxGLoc$start)\ngenbankkinases$locGxxGprotein <- genbankkinases$GxGfragstart + genbankkinases$GxxGLoc - 3\n\n# find G4xG\nnumG4xG <- str_count(GxGfrag,  'G[A-Z]{4}G')\ngenbankkinases$numG4xG <- as.numeric(numG4xG)\nG4xGLoc <- str_locate(GxGfrag, 'G[A-Z]{4}G')\nG4xGLoc <- as.data.frame(G4xGLoc)\ngenbankkinases$G4xGLoc <- as.numeric(G4xGLoc$start)\ngenbankkinases$locG4xGprotein <- genbankkinases$GxGfragstart + genbankkinases$G4xGLoc - 1\n\n# find GxG\nnumGxG <- str_count(GxGfrag,  'G[A-Z]G')\ngenbankkinases$numGxG <- as.numeric(numGxG)\nGxGLoc <- str_locate(GxGfrag, 'G[A-Z]G')\nGxGLoc <- as.data.frame(GxGLoc)\ngenbankkinases$GxGLoc <- as.numeric(GxGLoc$start)\ngenbankkinases$locGxGprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGLoc - 1\n\n# find GxTxF (locates PIK3R4 - need to check it is the correct motif by looking at structure)\nnumGxTxF <- str_count(GxGfrag,  'G[A-Z]T[A-Z]F')\ngenbankkinases$numGxTxF <- as.numeric(numGxTxF)\nGxTxFLoc <- str_locate(GxGfrag, 'G[A-Z]T[A-Z]F')\nGxTxFLoc <- as.data.frame(GxTxFLoc)\ngenbankkinases$GxTxFLoc <- as.numeric(GxTxFLoc$start)\ngenbankkinases$locGxTxFprotein <- genbankkinases$GxGfragstart + genbankkinases$GxTxFLoc - 1\n\n# find GG (only use as the last resort to capture AMHRH2 and ANKK1)\nnumGG <- str_count(GxGfrag, 'GG')\ngenbankkinases$numGG <- as.numeric(numGG)\nGGLoc <- str_locate(GxGfrag, 'GG')\nGGLoc <- as.data.frame(GGLoc)\ngenbankkinases$GGLoc <- as.numeric(GGLoc$start)\ngenbankkinases$locGGprotein <- genbankkinases$GxGfragstart + genbankkinases$GGLoc - 3\n\n\n# choose correct GxG\ngenbankkinases$loc_actual_gxg_A <- ifelse (genbankkinases$numGxGxxG <1, genbankkinases$locGxGxFprotein, genbankkinases$locGxGxxGprotein)\ngenbankkinases$loc_actual_gxg_B <- genbankkinases$loc_actual_gxg_A\ngenbankkinases$loc_actual_gxg_C   <- ifelse (genbankkinases$loc_actual_gxg_A %in% NA, genbankkinases$locGxFGprotein, genbankkinases$loc_actual_gxg_B)\ngenbankkinases$loc_actual_gxg_D <- genbankkinases$loc_actual_gxg_C\ngenbankkinases$loc_actual_gxg_E   <- ifelse (genbankkinases$loc_actual_gxg_C %in% NA, genbankkinases$locGxGxYprotein, genbankkinases$loc_actual_gxg_D)\ngenbankkinases$loc_actual_gxg_F <- genbankkinases$loc_actual_gxg_E\n\ngenbankkinases$loc_actual_gxg_G   <- ifelse (genbankkinases$loc_actual_gxg_E %in% NA, genbankkinases$locGxGxxAprotein, genbankkinases$loc_actual_gxg_F)\ngenbankkinases$loc_actual_gxg_H <- genbankkinases$loc_actual_gxg_G\ngenbankkinases$loc_actual_gxg_I   <- ifelse (genbankkinases$loc_actual_gxg_G %in% NA, genbankkinases$locGxGxxSprotein, genbankkinases$loc_actual_gxg_H)\ngenbankkinases$loc_actual_gxg_J <- genbankkinases$loc_actual_gxg_I\ngenbankkinases$loc_actual_gxg_K   <- ifelse (genbankkinases$loc_actual_gxg_I %in% NA, genbankkinases$locSxGxxGprotein, genbankkinases$loc_actual_gxg_J)\ngenbankkinases$loc_actual_gxg_L <- genbankkinases$loc_actual_gxg_K\ngenbankkinases$loc_actual_gxg_M   <- ifelse (genbankkinases$loc_actual_gxg_K %in% NA, genbankkinases$locGxxGprotein, genbankkinases$loc_actual_gxg_L)\ngenbankkinases$loc_actual_gxg_N <- genbankkinases$loc_actual_gxg_M\ngenbankkinases$loc_actual_gxg_O   <- ifelse (genbankkinases$loc_actual_gxg_M %in% NA, genbankkinases$locG4xGprotein, genbankkinases$loc_actual_gxg_N)\ngenbankkinases$loc_actual_gxg_P <- genbankkinases$loc_actual_gxg_O\ngenbankkinases$loc_actual_gxg_Q   <- ifelse (genbankkinases$loc_actual_gxg_O %in% NA, genbankkinases$locGxGprotein, genbankkinases$loc_actual_gxg_P)\ngenbankkinases$loc_actual_gxg_R <- genbankkinases$loc_actual_gxg_Q\ngenbankkinases$loc_actual_gxg_S   <- ifelse (genbankkinases$loc_actual_gxg_Q %in% NA, genbankkinases$locGxTxFprotein, genbankkinases$loc_actual_gxg_R)\ngenbankkinases$loc_actual_gxg_T <- genbankkinases$loc_actual_gxg_S\ngenbankkinases$loc_actual_gxg   <- ifelse (genbankkinases$loc_actual_gxg_S %in% NA, genbankkinases$locGGprotein, genbankkinases$loc_actual_gxg_T)\n\n#extract GxGxxG motif and location/aa for each\nstartGxG <- genbankkinases$loc_actual_gxg\nendGxG <- genbankkinases$loc_actual_gxg + 5\ngenbankkinases$GxGxxGmotif <- str_sub(genbankkinases$Protein_Seq, startGxG, endGxG)\n\ngenbankkinases$GxGxxG_G1     <- str_sub(genbankkinases$GxGxxGmotif, 1, 1)\ngenbankkinases$GxGxxG_X1     <- str_sub(genbankkinases$GxGxxGmotif, 2, 2)\ngenbankkinases$GxGxxG_G2     <- str_sub(genbankkinases$GxGxxGmotif, 3, 3)\ngenbankkinases$GxGxxG_X2     <- str_sub(genbankkinases$GxGxxGmotif, 4, 4)\ngenbankkinases$GxGxxG_X3     <- str_sub(genbankkinases$GxGxxGmotif, 5, 5)\ngenbankkinases$GxGxxG_G3     <- str_sub(genbankkinases$GxGxxGmotif, 6, 6)\n\n\ngenbankkinases$GxGxxG_G1loc   <- genbankkinases$loc_actual_gxg\ngenbankkinases$GxGxxG_X1loc   <- genbankkinases$loc_actual_gxg + 1\ngenbankkinases$GxGxxG_G2loc   <- genbankkinases$loc_actual_gxg + 2\ngenbankkinases$GxGxxG_X2loc   <- genbankkinases$loc_actual_gxg + 3\ngenbankkinases$GxGxxG_X3loc   <- genbankkinases$loc_actual_gxg + 4\ngenbankkinases$GxGxxG_G3loc   <- genbankkinases$loc_actual_gxg + 5\n\n\n\ngenbankkinases$GXGXXG_MOTIF <- paste(genbankkinases$GxGxxG_G1, genbankkinases$GxGxxG_G2, genbankkinases$GxGxxG_G3)\n\ngenbankkinases$CATALYTIC_FRAG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$GxGxxG_G1loc, genbankkinases$APE_E1loc )\n\nwrite.csv (genbankkinases, file ='outputs/TCGAgenbankkinases.csv')\n\n#find salt bridge e\ngenbankkinases$saltbridgeEfragSTART <- genbankkinases$actual_lysine + 5\ngenbankkinases$saltbridgeEfragEND <- genbankkinases$actual_lysine + 30\ngenbankkinases$saltbridgeEfrag <- str_sub(genbankkinases$Protein_Seq, genbankkinases$saltbridgeEfragSTART, genbankkinases$saltbridgeEfragEND )\nsaltbridgeEfrag <- genbankkinases$saltbridgeEfrag\n\n#find ExxxL\nnumExxxL <- str_count(saltbridgeEfrag,  'E[A-Z]{3}L')\ngenbankkinases$numExxxL <- as.numeric(numExxxL)\nExxxLLoc <- str_locate(saltbridgeEfrag,  'E[A-Z]{3}L')\nExxxLLoc <- as.data.frame(ExxxLLoc)\ngenbankkinases$ExxxLLoc <- as.numeric(ExxxLLoc$start)\ngenbankkinases$ExxxLLocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$ExxxLLoc - 1\n\n#find ExxI\nnumExxI <- str_count(saltbridgeEfrag,  'E[A-Z]{2}I')\ngenbankkinases$numExxI <- as.numeric(numExxI)\nExxILoc <- str_locate(saltbridgeEfrag,  'E[A-Z]{2}I')\nExxILoc <- as.data.frame(ExxILoc)\ngenbankkinases$ExxILoc <- as.numeric(ExxILoc$start)\ngenbankkinases$ExxILocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$ExxILoc - 1\n\n#find ExxxM\nnumExxxM <- str_count(saltbridgeEfrag,  'E[A-Z]{3}M')\ngenbankkinases$numExxxM <- as.numeric(numExxxM)\nExxxMLoc <- str_locate(saltbridgeEfrag,  'E[A-Z]{3}M')\nExxxMLoc <- as.data.frame(ExxxMLoc)\ngenbankkinases$ExxxMLoc <- as.numeric(ExxxMLoc$start)\ngenbankkinases$ExxxMLocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$ExxxMLoc - 1\n\n#find ExxL\nnumExxL <- str_count(saltbridgeEfrag,  'E[A-Z]{2}L')\ngenbankkinases$numExxL <- as.numeric(numExxL)\nExxLLoc <- str_locate(saltbridgeEfrag,  'E[A-Z]{2}L')\nExxLLoc <- as.data.frame(ExxLLoc)\ngenbankkinases$ExxLLoc <- as.numeric(ExxLLoc$start)\ngenbankkinases$ExxLLocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$ExxLLoc - 1\n\n#find QxxxE\nnumQxxxE <- str_count(saltbridgeEfrag,  'Q[A-Z]{3}E')\ngenbankkinases$numQxxxE <- as.numeric(numQxxxE)\nQxxxELoc <- str_locate(saltbridgeEfrag,  'Q[A-Z]{3}E')\nQxxxELoc <- as.data.frame(QxxxELoc)\ngenbankkinases$QxxxELoc <- as.numeric(QxxxELoc$start)\ngenbankkinases$QxxxELocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$QxxxELoc + 3\n\n# choose correct saltbridge\ngenbankkinases$loc_actual_saltbridge_A <- ifelse (genbankkinases$numExxxL <1, genbankkinases$ExxILocprotein, genbankkinases$ExxxLLocprotein)\ngenbankkinases$loc_actual_saltbridge_B <- genbankkinases$loc_actual_saltbridge_A\ngenbankkinases$loc_actual_saltbridge_C   <- ifelse (genbankkinases$loc_actual_saltbridge_A %in% NA, genbankkinases$ExxxMLocprotein, genbankkinases$loc_actual_saltbridge_B)\ngenbankkinases$loc_actual_saltbridge_D <- genbankkinases$loc_actual_saltbridge_C\ngenbankkinases$loc_actual_saltbridge_E   <- ifelse (genbankkinases$loc_actual_saltbridge_C %in% NA, genbankkinases$ExxLLocprotein, genbankkinases$loc_actual_saltbridge_D)\ngenbankkinases$loc_actual_saltbridge_F <- genbankkinases$loc_actual_saltbridge_E\ngenbankkinases$loc_actual_saltbridge   <- ifelse (genbankkinases$loc_actual_saltbridge_E %in% NA, genbankkinases$QxxxELocprotein, genbankkinases$loc_actual_saltbridge_F)\n\ngenbankkinases$checkE <- str_sub(genbankkinases$Protein_Seq, genbankkinases$loc_actual_saltbridge, genbankkinases$loc_actual_saltbridge)\n\nwrite.csv (genbankkinases, file ='TEMP_genbankkinases.csv')\n\n# merge with combined TCGA data\ncomboDATA <- read.csv (file = 'SOURCE_allTCGA_jan2016.csv')  #was'SOURCE_allTCGA.csv'# and can be allcbioNov2015.csv\nkinaseLoc <- genbankkinases\n\n\ncomboDATA = subset(comboDATA, mutation_type != '3UTR')\ncomboDATA = subset(comboDATA, mutation_type != '5UTR')\ncomboDATA = subset(comboDATA, mutation_type != 'Intron')\ncomboDATA = subset(comboDATA, mutation_type != 'Splice_Site_Ins')\ncomboDATA = subset(comboDATA, mutation_type != 'Splice_Site_Del')\ncomboDATA = subset(comboDATA, mutation_type != 'Splice_Site_SNP')\ncomboDATA = subset(comboDATA, mutation_type != 'Silent')\ncomboDATA = subset(comboDATA, mutation_type != 'Nonsense_Mutation')\ncomboDATA = subset(comboDATA, mutation_type != 'Frame_Shift_Del')\ncomboDATA = subset(comboDATA, mutation_type != 'Frame_Shift_Ins')\ncomboDATA = subset(comboDATA, mutation_type != 'In_Frame_Del')\ncomboDATA = subset(comboDATA, mutation_type != 'In_Frame_Ins')\ncomboDATA = subset(comboDATA, mutation_type != 'outofframe')\ncomboDATA = subset(comboDATA, mutation_type != 'Flank')\ncomboDATA = subset(comboDATA, mutation_type != 'Splice_Site')\ncomboDATA = subset(comboDATA, mutation_type != 'De_novo_Start_InFrame')\ncomboDATA = subset(comboDATA, mutation_type != 'Stop_Codon_DNP')\ncomboDATA = subset(comboDATA, mutation_type != 'Stop_Codon_Ins')\n\n\n#extract data from comboDATA\nCodonCombo <- str_extract(comboDATA$amino_acid_change, \"[0-9]+\")\ncomboDATA$Codon <- CodonCombo\nRefAmino <- str_extract(comboDATA$amino_acid_change, \"[A-Z]\")\ncomboDATA$AA <- RefAmino\nVarAmino <- str_sub(comboDATA$amino_acid_change, -1, -1)\ncomboDATA$VarAA <- VarAmino\n\n\n#GXGXXG_G1\nkinaseLoc$Codon <- kinaseLoc$GxGxxG_G1loc\nkinaseLoc$AA <- kinaseLoc$GxGxxG_G1\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_G1 <- merged\nwrite.csv (merged_G1, file='outputs/tcga/merged_GxGxxG_G1_all.csv')\n\n#GXGXXG_G2\nkinaseLoc$Codon <- kinaseLoc$GxGxxG_G2loc\nkinaseLoc$AA <- kinaseLoc$GxGxxG_G2\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_G2 <- merged\nwrite.csv (merged_G2, file='outputs/tcga/merged_GxGxxG_G2_all.csv')\n\n# critical lysine\nkinaseLoc$Codon <- kinaseLoc$actual_lysine\nkinaseLoc$AA <- 'K'\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_K <- merged\nwrite.csv (merged_K, file='outputs/tcga/critical_lysine_all.csv')\n\n\n\n# DFG_D\nkinaseLoc$Codon <- kinaseLoc$actual_DFG_D\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$actual_DFG_D, kinaseLoc$actual_DFG_D)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_DFG_D <- merged\nwrite.csv (merged_DFG_D, file='outputs/tcga/merged_DFG_G_all.csv')\n\n# DFG_F\nkinaseLoc$Codon <- kinaseLoc$actual_DFG_F\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$actual_DFG_F, kinaseLoc$actual_DFG_F)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_DFG_F <- merged\nwrite.csv (merged_DFG_D, file='outputs/tcga/merged_DFG_F_all.csv')\n\n# DFG_G\nkinaseLoc$Codon <- kinaseLoc$actual_DFG_G\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$actual_DFG_G, kinaseLoc$actual_DFG_G)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_DFG_G <- merged\nwrite.csv (merged_DFG_G, file='outputs/tcga/merged_DFG_G_all.csv')\n\n\n# HRD_H\nkinaseLoc$Codon <- kinaseLoc$actual_HRD_H\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$actual_HRD_H, kinaseLoc$actual_HRD_H)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_HRD_H <- merged\nwrite.csv (merged_HRD_H, file='outputs/tcga/merged_HRD_H_all.csv')\n\n# HRD_R\nkinaseLoc$Codon <- kinaseLoc$actual_HRD_R\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$actual_HRD_R, kinaseLoc$actual_HRD_R)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_HRD_R <- merged\nwrite.csv (merged_HRD_R, file='outputs/tcga/merged_HRD_R_all.csv')\n\n# HRD_D\nkinaseLoc$Codon <- kinaseLoc$actual_HRD_D\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$actual_HRD_D, kinaseLoc$actual_HRD_D)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_HRD_D <- merged\nwrite.csv (merged_HRD_D, file='outputs/tcga/merged_HRD_D_all.csv')\n\n# HRD + 5\nkinaseLoc$Codon <- kinaseLoc$actual_HRD_D + 5\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$actual_HRD_D, kinaseLoc$actual_HRD_D)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_HRD_Dp5 <- merged\nwrite.csv (merged_HRD_Dp5, file='outputs/tcga/merged_HRD_D_all.csv')\n\n\n# APE_A\nkinaseLoc$Codon <- kinaseLoc$APE_A1loc \nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$APE_A1loc, kinaseLoc$APE_A1loc)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_APE_A <- merged\nwrite.csv (merged_APE_A, file='outputs/tcga/merged_APE_A_all.csv')\n\n# APE_P\nkinaseLoc$Codon <- kinaseLoc$APE_P1loc \nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$APE_P1loc, kinaseLoc$APE_P1loc)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_APE_P <- merged\nwrite.csv (merged_APE_P, file='outputs/tcga/merged_APE_P_all.csv')\n\n# APE_E\nkinaseLoc$Codon <- kinaseLoc$APE_E1loc \nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$APE_E1loc, kinaseLoc$APE_E1loc)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_APE_E <- merged\nwrite.csv (merged_APE_E, file='outputs/tcga/merged_APE_E_all.csv')\n\n\n# CorrectedG\nkinaseLoc$Codon <- kinaseLoc$correctedG_loc\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$correctedG_loc, kinaseLoc$correctedG_loc)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_correctedG <- merged\nwrite.csv (merged_correctedG, file='outputs/tcga/merged_correctedG_all.csv')\n\n# SALTBRIDGE_E\nkinaseLoc$Codon <- kinaseLoc$loc_actual_saltbridge\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$loc_actual_saltbridge, kinaseLoc$loc_actual_saltbridge)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_saltbridge <- merged\nwrite.csv (merged_saltbridge, file='outputs/tcga/merged_saltbridge_all.csv')\n\n# critical lysine minus 2 = V[A]IK\nkinaseLoc$Codon <- kinaseLoc$actual_lysine - 2\nkinaseLoc$AA <- str_sub(kinaseLoc$Protein_Seq, kinaseLoc$Codon, kinaseLoc$Codon)\nmerged <- merge(comboDATA, kinaseLoc, by = c('Gene', 'Codon', 'AA') )\nmerged$pastedref <- paste(merged$Gene, merged$Codon, merged$case_id, merged$AA, sep = \"_\" )\nmerged$DUP= !duplicated(merged$pastedref)\nmerged <- subset(merged, DUP == 'TRUE')\nmerged_Kminus2 <- merged\nwrite.csv (merged_Kminus2, file='outputs/tcga/critical_lysine_minus2.csv')\n\n#bind tables together\ntotal <- rbind (merged_G2, merged_Kminus2, merged_HRD_H, merged_HRD_R, merged_HRD_D, merged_HRD_Dp5, merged_DFG_D, merged_DFG_G, merged_APE_A, merged_APE_P, merged_APE_E, merged_saltbridge, merged_correctedG)\nwrite.csv (total, file ='outputs/tcga/total_ALLTRANSCRIPTS.csv')\n\n\nfreqscreen <- table(total$Gene)\nwrite.csv (freqscreen, file ='SOURCE_tcgafreqscreen_ALLTRANSCRIPTS.csv')         \n\n#merge CCLE and TCGA\ntcgafreq <- read.csv ( file = 'SOURCE_tcgafreqscreen_ALLTRANSCRIPTS.csv')\ncclefreq <- read.csv ( file = 'SOURCE_cclefreqscreen_ALLTRANSCRIPTS.csv')\ntotalfreq = merge(tcgafreq, cclefreq, by = 'Var1', nomatch = 0)\nwrite.csv (totalfreq, file ='outputs/totalfreq.csv')\n\n# TRUNCATING PART\nmutDATA <- read.csv (file = 'SOURCE_alltcga_jan2016.csv')\nTRUNCATIONmutations = subset(mutDATA, mutation_type == 'Nonsense_Mutation') \n\n# first merge genes motif data with truncation mutations\nmerged <- merge(TRUNCATIONmutations, genbankkinases, by = 'Gene', nomatch = 0)\n\n# will match ref amino acid as well as codon <endCatalytic) - AS A CHECKING MEASURE LOOK AT HOW THIS CHANGES IF JUST MATCHING BY CODON\n# extract Codon / Ref  from amino acid change\nmerged$Codon <- as.numeric(str_extract(merged$amino_acid_change, \"[0-9]+\"))\nmerged$RefAmino <- str_extract(merged$amino_acid_change, \"[A-Z]\")\n\n\n# extract predicted amino acid from each protein seq (calculated from Codon)\nmerged$codonConfirm <- substr(merged$Protein_Seq, merged$Codon, merged$Codon)\n\n#to ensure cases with more than one truncation mutation of the same gene do not skew results remove duplicate of case_id + transcript (not gene as this may remove incorrect transcript) - potentially this could leave an invalid mutation and take out a valid - but will manually check an invalids to make sure there isnt a valid - rank with smallest first to try and mitigate\nmergedNODUPS <- merged[order(merged$Codon),]\nmergedNODUPS$noMULTIPLEhits <- paste(mergedNODUPS$f, mergedNODUPS$case_id)\nmergedNODUPS$transcriptDUP = !duplicated(mergedNODUPS$noMULTIPLEhits)\nmergedNODUPS <- subset(mergedNODUPS, transcriptDUP == 'TRUE')\n\n\n#merge by Codon smaller than endCAT and Ref Amino acid is the same as locAmino\ntruncSTRINGENT <- subset (mergedNODUPS, (Codon <= endCAT) & (RefAmino == codonConfirm))\n\n#rank matches by ascending endCAT result so that the shortest matching transcript is retained\ntruncSTRINGENTSHORTEST <- truncSTRINGENT[order(truncSTRINGENT$endCAT),]\n\n#to filter out duplicates of Gene, Codon and Sample (this should leave the shortest transcript)\ntruncSTRINGENTSHORTEST$duplicateREF <- paste(truncSTRINGENTSHORTEST$Gene, truncSTRINGENTSHORTEST$Codon, truncSTRINGENTSHORTEST$case_id, sep ='_')\ntruncSTRINGENTSHORTEST$mergedDUP= !duplicated(truncSTRINGENTSHORTEST$duplicateREF)\ngenefreqSHORTEST <- subset(truncSTRINGENTSHORTEST, mergedDUP == 'TRUE')\ngenefreqSHORTEST$transcriptFREQ <- paste(genefreqSHORTEST$f, genefreqSHORTEST$endCAT, sep = '_')\nfreqSTRINGENTSHORTEST <-table(genefreqSHORTEST$transcriptFREQ)\nwrite.csv (freqSTRINGENTSHORTEST, file ='TEMP_freqTRANSCIPTSSHORTESTtcgaALL.csv')\n\n#to length correct\nfreqSHORTEST <- read.csv ('TEMP_freqTRANSCIPTSSHORTESTtcgaALL.csv')\ncolnames(freqSHORTEST)[2] <- \"transcriptFREQ\"\n#extract gene and endCAT from each freq name\nfreqSHORTEST$Gene <- gsub    ( \"[-].*$\"     , \"\", freqSHORTEST$transcriptFREQ)\nfreqSHORTEST$endCAT <-  gsub ( \".*[_]\"    , \"\", freqSHORTEST$transcriptFREQ)\nfreqSHORTEST$endCAT <- as.numeric(freqSHORTEST$endCAT)\n#calculate length corrected freq for each transcript entry\nfreqSHORTEST$oneoverendCAT <- 1 / freqSHORTEST$endCAT\nfreqSHORTEST$score <- freqSHORTEST$Freq * freqSHORTEST$oneoverendCAT\n\n#add scores for each gene together to get total(using dplyr)\nfreqADDEDSHORTEST <- ddply(freqSHORTEST,\"Gene\",numcolwise(sum))\n\nwrite.csv (freqADDEDSHORTEST, file ='TEMP_lengthcorrectedfreq_tcgaALLSHORTEST.csv')\n\n#same for longest transcript\ntruncSTRINGENTLONGEST <- truncSTRINGENT[order(-truncSTRINGENT$endCAT),]\ntruncSTRINGENTLONGEST$duplicateREF <- paste(truncSTRINGENTLONGEST$Gene, truncSTRINGENTLONGEST$Codon, truncSTRINGENTLONGEST$case_id, sep ='_')\ntruncSTRINGENTLONGEST$mergedDUP= !duplicated(truncSTRINGENTLONGEST$duplicateREF)\ngenefreqLONGEST <- subset(truncSTRINGENTLONGEST, mergedDUP == 'TRUE')\ngenefreqLONGEST$transcriptFREQ <- paste(genefreqLONGEST$f, genefreqLONGEST$endCAT, sep = '_')\nfreqSTRINGENTLONGEST <-table(genefreqLONGEST$transcriptFREQ)\nwrite.csv (freqSTRINGENTLONGEST, file ='TEMP_freqTRANSCIPTSLONGESTtcgaALL.csv')\nfreqLONGEST <- read.csv ('TEMP_freqTRANSCIPTSLONGESTtcgaALL.csv')\ncolnames(freqLONGEST)[2] <- \"transcriptFREQ\"\nfreqLONGEST$Gene <- gsub    ( \"[-].*$\"     , \"\", freqLONGEST$transcriptFREQ)\nfreqLONGEST$endCAT <-  gsub ( \".*[_]\"    , \"\", freqLONGEST$transcriptFREQ)\nfreqLONGEST$endCAT <- as.numeric(freqLONGEST$endCAT)\nfreqLONGEST$oneoverendCAT <- 1 / freqLONGEST$endCAT\nfreqLONGEST$score <- freqLONGEST$Freq * freqLONGEST$oneoverendCAT\nfreqADDEDLONGEST <- ddply(freqLONGEST,\"Gene\",numcolwise(sum))\nwrite.csv (freqADDEDLONGEST, file ='TEMP_lengthcorrectedfreq_tcgaALLLONGEST.csv')\n\n# merge two SHORTEST truncating scores (using dplyr)\nccletruncSHORTEST <- read.csv (file = 'TEMP_lengthcorrectedfreq_ccleALLSHORTEST.csv')\ntcgatruncSHORTEST <- read.csv (file = 'TEMP_lengthcorrectedfreq_tcgaALLSHORTEST.csv')\ncombinedTRUNCSHORTEST <- rbind(ccletruncSHORTEST, tcgatruncSHORTEST)\ncombinedTRUNCscoresSHORTEST <- ddply(combinedTRUNCSHORTEST,\"Gene\",numcolwise(sum))\nwrite.csv (combinedTRUNCscoresSHORTEST, file ='outputs/mergedTRUNCscoresSHORTEST.csv')\n\n# merge two LONGEST truncating scores (using dplyr)\nccletruncLONGEST <- read.csv (file = 'TEMP_lengthcorrectedfreq_ccleALLLONGEST.csv')\ntcgatruncLONGEST <- read.csv (file = 'TEMP_lengthcorrectedfreq_tcgaALLLONGEST.csv')\ncombinedTRUNCLONGEST <- rbind(ccletruncLONGEST, tcgatruncLONGEST)\ncombinedTRUNCscoresLONGEST <- ddply(combinedTRUNCLONGEST,\"Gene\",numcolwise(sum))\nwrite.csv (combinedTRUNCscoresLONGEST, file ='outputs/mergedTRUNCscoresLONGEST.csv')\n\n#get mean of LONGEST and SHORTEST scores\ncombinedTRUNCscoresMEAN <- combinedTRUNCscoresSHORTEST\ncombinedTRUNCscoresMEAN$longestSCORE <- as.numeric(combinedTRUNCscoresLONGEST$score)\ncolnames(combinedTRUNCscoresMEAN)[7] <- \"shortestSCORE\"\ncombinedTRUNCscoresMEAN$shortestSCORE <- as.numeric (combinedTRUNCscoresMEAN$shortestSCORE)\ncombinedTRUNCscoresMEAN$meanSCORE = (combinedTRUNCscoresMEAN$shortestSCORE + combinedTRUNCscoresMEAN$longestSCORE) / 2\nwrite.csv (combinedTRUNCscoresMEAN, file ='outputs/mergedTRUNCscoresMEAN.csv')\n\n#make table to bind to CCLE genefreqSHORTEST to validate all mutations\nvalidateTCGA <- as.data.frame(genefreqSHORTEST$Gene)\ncolnames(validateTCGA)[1] <- \"Gene\"\nvalidateTCGA$transcript <- genefreqSHORTEST$f\nvalidateTCGA$mutation <- genefreqSHORTEST$amino_acid_change\nvalidateTCGA$study <- genefreqSHORTEST$genetic_profile_id\nvalidateTCGA$case_id <- genefreqSHORTEST$case_id\nvalidateTCGA$codon <- genefreqSHORTEST$Codon\nvalidateTCGA$endCAT <- genefreqSHORTEST$endCAT\n\n#bind to validateCCLE\ntop30check <- rbind (validateTCGA, validateCCLE) \n\n\n#check the top30 to make sure the all transcript analysis doesnt give any false positives\ntop30 <- read.csv ('SOURCE_Top30.csv')\ntop30check <- merge (top30, top30check, by = 'Gene', nomatch = 0)\nwrite.csv (top30check, file ='checking/top30check.csv')\n\n#these were checked and are all valid - not extract catalytic frag of top 30 - note there are mutliple diff transcripts - use longest one that matches\n# use genefreqLONGEST which is all tcga matches ranked by descending size of transcript\n#first get rid of duplicates for gene to leave longest transcript\nFRAGEXTRACT <- genefreqLONGEST\nFRAGEXTRACT$DUP= !duplicated(FRAGEXTRACT$Gene)\nFRAGEXTRACT <- subset(FRAGEXTRACT, DUP == 'TRUE')\nFRAGEXTRACTtop30 <- merge (top30, FRAGEXTRACT, by = 'Gene', nomatch = 0)\n#AMHR2 was changed manually as it is incorrect\nwrite.csv (FRAGEXTRACTtop30, file ='TEMP_check.csv')\n\n\n",
    "created" : 1467755832103.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4084125329",
    "id" : "8E162941",
    "lastKnownWriteTime" : 1470160285,
    "path" : "~/Dropbox/Andy research/KiMoFINAL_holiday/allTRANSCRIPTStcga_2.R",
    "project_path" : "allTRANSCRIPTStcga_2.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
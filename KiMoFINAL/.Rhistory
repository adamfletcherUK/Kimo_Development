GTx6DLoc <- str_locate(APEfrag, 'GT[A-Z]{6}D')
GTx6DLoc <- as.data.frame(GTx6DLoc)
genbankkinases$GTx6DLoc <- as.numeric(GTx6DLoc$start)
genbankkinases$locGTx6Dprotein <- genbankkinases$APEfragstart + genbankkinases$GTx6DLoc + 5
# find AxE
numAxE <- str_count(APEfrag,  'A[A-Z]E')
genbankkinases$numAxE <- as.numeric(numAxE)
AxELoc <- str_locate(APEfrag, 'A[A-Z]E')
AxELoc <- as.data.frame(AxELoc)
genbankkinases$AxELoc <- as.numeric(AxELoc$start)
genbankkinases$locAxEprotein <- genbankkinases$APEfragstart + genbankkinases$AxELoc - 1
# find APD
numAPD <- str_count(APEfrag,  'APD')
genbankkinases$numAPD  <- as.numeric(numAPD)
APDLoc <- str_locate(APEfrag, 'APD')
APDLoc <- as.data.frame(APDLoc)
genbankkinases$APDLoc <- as.numeric(APDLoc$start)
genbankkinases$locAPDprotein <- genbankkinases$APEfragstart + genbankkinases$APDLoc - 1
# find PPD
numPPD <- str_count(APEfrag,  'PPD')
genbankkinases$numPPD  <- as.numeric(numPPD)
PPDLoc <- str_locate(APEfrag, 'PPD')
PPDLoc <- as.data.frame(PPDLoc)
genbankkinases$PPDLoc <- as.numeric(PPDLoc$start)
genbankkinases$locPPDprotein <- genbankkinases$APEfragstart + genbankkinases$PPDLoc - 1
# find GTxxY
numGTxxY <- str_count(APEfrag,  'GT[A-Z]{2}Y')
genbankkinases$numGTxxY  <- as.numeric(numGTxxY)
GTxxYLoc <- str_locate(APEfrag, 'GT[A-Z]{2}Y')
GTxxYLoc <- as.data.frame(GTxxYLoc)
genbankkinases$GTxxYLoc <- as.numeric(GTxxYLoc$start)
genbankkinases$locGTxxYprotein <- genbankkinases$APEfragstart + genbankkinases$GTxxYLoc + 5
# find PIR
numPIR <- str_count(APEfrag,  'PIR')
genbankkinases$numPIR  <- as.numeric(numPIR)
PIRLoc <- str_locate(APEfrag, 'PIR')
PIRLoc <- as.data.frame(PIRLoc)
genbankkinases$PIRLoc <- as.numeric(PIRLoc$start)
genbankkinases$locPIRprotein <- genbankkinases$APEfragstart + genbankkinases$PIRLoc + 4
# find Gx7E
numGx7E <- str_count(APEfrag,  'G[A-Z]{7}E')
genbankkinases$numGx7E  <- as.numeric(numGx7E)
Gx7ELoc <- str_locate(APEfrag, 'G[A-Z]{7}E')
Gx7ELoc <- as.data.frame(Gx7ELoc)
genbankkinases$Gx7ELoc <- as.numeric(Gx7ELoc$start)
genbankkinases$locGx7Eprotein <- genbankkinases$APEfragstart + genbankkinases$Gx7ELoc + 5
# find YxAP (captures MAPKAPK5)
numYxAP <- str_count(APEfrag,  'Y[A-Z]{1}AP')
genbankkinases$numYxAP  <- as.numeric(numYxAP)
YxAPLoc <- str_locate(APEfrag, 'Y[A-Z]{1}AP')
YxAPLoc <- as.data.frame(YxAPLoc)
genbankkinases$YxAPLoc <- as.numeric(YxAPLoc$start)
genbankkinases$YxAPLocprotein <- genbankkinases$APEfragstart + genbankkinases$YxAPLoc + 1
# find WYxxPR (captures MAPK4 and MAPK6)
numWYxxPR <- str_count(APEfrag,  'WY[A-Z]{2}PR')
genbankkinases$numWYxxPR  <- as.numeric(numWYxxPR)
WYxxPRLoc <- str_locate(APEfrag, 'WY[A-Z]{2}PR')
WYxxPRLoc <- as.data.frame(WYxxPRLoc)
genbankkinases$WYxxPRLoc <- as.numeric(WYxxPRLoc$start)
genbankkinases$WYxxPRLocprotein <- genbankkinases$APEfragstart + genbankkinases$WYxxPRLoc + 2
# choose correct APE
genbankkinases$loc_actual_APE_A <- ifelse (genbankkinases$numAPE <1, genbankkinases$locGTx5NEprotein, genbankkinases$locAPEprotein)
genbankkinases$loc_actual_APE_B <- genbankkinases$loc_actual_APE_A
genbankkinases$loc_actual_APE_C   <- ifelse (genbankkinases$loc_actual_APE_A %in% NA, genbankkinases$locGTx6Eprotein, genbankkinases$loc_actual_APE_B)
genbankkinases$loc_actual_APE_D <- genbankkinases$loc_actual_APE_C
genbankkinases$loc_actual_APE_E   <- ifelse (genbankkinases$loc_actual_APE_C %in% NA, genbankkinases$locPEprotein, genbankkinases$loc_actual_APE_D)
genbankkinases$loc_actual_APE_F <- genbankkinases$loc_actual_APE_E
genbankkinases$loc_actual_APE_G   <- ifelse (genbankkinases$loc_actual_APE_E %in% NA, genbankkinases$locGTx6Dprotein, genbankkinases$loc_actual_APE_F)
genbankkinases$loc_actual_APE_H <- genbankkinases$loc_actual_APE_G
genbankkinases$loc_actual_APE_I   <- ifelse (genbankkinases$loc_actual_APE_G %in% NA, genbankkinases$locGTxxYprotein, genbankkinases$loc_actual_APE_H)
genbankkinases$loc_actual_APE_J <- genbankkinases$loc_actual_APE_I
genbankkinases$loc_actual_APE_K   <- ifelse (genbankkinases$loc_actual_APE_I %in% NA, genbankkinases$locAPDprotein, genbankkinases$loc_actual_APE_J)
genbankkinases$loc_actual_APE_L  <- genbankkinases$loc_actual_APE_K
genbankkinases$loc_actual_APE_M   <- ifelse (genbankkinases$loc_actual_APE_K %in% NA, genbankkinases$locPPDprotein, genbankkinases$loc_actual_APE_L)
genbankkinases$loc_actual_APE_N  <- genbankkinases$loc_actual_APE_M
genbankkinases$loc_actual_APE_O   <- ifelse (genbankkinases$loc_actual_APE_M %in% NA, genbankkinases$WYxxPRLocprotein, genbankkinases$loc_actual_APE_N)
genbankkinases$loc_actual_APE_P <- genbankkinases$loc_actual_APE_O
genbankkinases$loc_actual_APE_Q   <- ifelse (genbankkinases$loc_actual_APE_O %in% NA, genbankkinases$locAxEprotein, genbankkinases$loc_actual_APE_P)
genbankkinases$loc_actual_APE_R <- genbankkinases$loc_actual_APE_Q
genbankkinases$loc_actual_APE_S   <- ifelse (genbankkinases$loc_actual_APE_Q %in% NA, genbankkinases$locPIRprotein, genbankkinases$loc_actual_APE_R)
genbankkinases$loc_actual_APE_T <- genbankkinases$loc_actual_APE_S
genbankkinases$loc_actual_APE_U   <- ifelse (genbankkinases$loc_actual_APE_S %in% NA, genbankkinases$locGx7Eprotein, genbankkinases$loc_actual_APE_T)
genbankkinases$loc_actual_APE_V <- genbankkinases$loc_actual_APE_U
genbankkinases$loc_actual_APE   <- ifelse (genbankkinases$loc_actual_APE_U %in% NA, genbankkinases$YxAPLocprotein, genbankkinases$loc_actual_APE_V)
genbankkinases$APE_m14loc   <- genbankkinases$loc_actual_APE - 14
genbankkinases$APE_m13loc   <- genbankkinases$loc_actual_APE - 13
genbankkinases$APE_m12loc   <- genbankkinases$loc_actual_APE - 12
genbankkinases$APE_m11loc   <- genbankkinases$loc_actual_APE - 11
genbankkinases$APE_m10loc   <- genbankkinases$loc_actual_APE - 10
genbankkinases$APE_m9loc   <- genbankkinases$loc_actual_APE - 9
genbankkinases$APE_m8loc   <- genbankkinases$loc_actual_APE - 8
genbankkinases$APE_m7loc   <- genbankkinases$loc_actual_APE - 7
genbankkinases$APE_m6loc   <- genbankkinases$loc_actual_APE - 6
genbankkinases$APE_m5loc   <- genbankkinases$loc_actual_APE - 5
genbankkinases$APE_m4loc   <- genbankkinases$loc_actual_APE - 4
genbankkinases$APE_m3loc   <- genbankkinases$loc_actual_APE - 3
genbankkinases$APE_m2loc   <- genbankkinases$loc_actual_APE - 2
genbankkinases$APE_m1loc   <- genbankkinases$loc_actual_APE - 1
genbankkinases$APE_A1loc   <- genbankkinases$loc_actual_APE
genbankkinases$APE_P1loc   <- genbankkinases$loc_actual_APE + 1
genbankkinases$APE_E1loc   <- genbankkinases$loc_actual_APE + 2
genbankkinases$APE_m14       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m14loc , genbankkinases$APE_m14loc)
genbankkinases$APE_m13       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m13loc , genbankkinases$APE_m13loc)
genbankkinases$APE_m12       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m12loc , genbankkinases$APE_m12loc)
genbankkinases$APE_m11       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m11loc , genbankkinases$APE_m11loc)
genbankkinases$APE_m10       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m10loc , genbankkinases$APE_m10loc)
genbankkinases$APE_m9       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m9loc , genbankkinases$APE_m9loc)
genbankkinases$APE_m8       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m8loc , genbankkinases$APE_m8loc)
genbankkinases$APE_m7       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m7loc , genbankkinases$APE_m7loc)
genbankkinases$APE_m6       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m6loc , genbankkinases$APE_m6loc)
genbankkinases$APE_m5       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m5loc , genbankkinases$APE_m5loc)
genbankkinases$APE_m4       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m4loc , genbankkinases$APE_m4loc)
genbankkinases$APE_m3       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m3loc , genbankkinases$APE_m3loc)
genbankkinases$APE_m2       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m2loc , genbankkinases$APE_m2loc)
genbankkinases$APE_m1       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_m1loc , genbankkinases$APE_m1loc)
genbankkinases$APE_A1       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_A1loc , genbankkinases$APE_A1loc)
genbankkinases$APE_P1       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_P1loc , genbankkinases$APE_P1loc)
genbankkinases$APE_E1       <- str_sub(genbankkinases$Protein_Seq, genbankkinases$APE_E1loc , genbankkinases$APE_E1loc)
genbankkinases$APE_MOTIF <- paste(genbankkinases$APE_A1, genbankkinases$APE_P1, genbankkinases$APE_E1)
genbankkinases$PE_MOTIF <- paste(genbankkinases$APE_P1, genbankkinases$APE_E1)
# if no G in APEm6 then look for G in APEm8 and then APEm9 and then A's in these positions
genbankkinases$correctedG_loc <- ifelse (genbankkinases$APE_m6 != 'G', genbankkinases$APE_m9loc, genbankkinases$APE_m6loc)
genbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)
genbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m5loc, genbankkinases$correctedG_loc)
genbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)
genbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m8loc, genbankkinases$correctedG_loc)
genbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)
genbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m10loc, genbankkinases$correctedG_loc)
genbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)
genbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m11loc, genbankkinases$correctedG_loc)
genbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)
genbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG != 'G', genbankkinases$APE_m7loc, genbankkinases$correctedG_loc)
genbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)
genbankkinases$correctedG_loc <- ifelse (genbankkinases$correctedG == 'G', genbankkinases$correctedG_loc, genbankkinases$APE_m6loc)
genbankkinases$correctedG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$correctedG_loc , genbankkinases$correctedG_loc)
#end of kinase domain = APE + defined end
genbankkinases$endCAT <- as.numeric(genbankkinases$APE_E1loc)
# find GxGxxG
GxGfragstart <- genbankkinases$actual_lysine - 45
genbankkinases$GxGfragstart <- as.numeric(GxGfragstart)
# NEED TO PUT THIS LINE IN FOR ALL MOTIF SEARCHES - TELLING THE FRAG TO START AT 1 IF MINUS NUMBER
genbankkinases$GxGfragstart <- ifelse(genbankkinases$GxGfragstart < 1, 1,genbankkinases$GxGfragstart )
GxGfragend <- genbankkinases$actual_lysine - 4
genbankkinases$GxGfragend <- as.numeric(GxGfragend)
GxGfrag <- str_sub(genbankkinases$Protein_Seq, genbankkinases$GxGfragstart, genbankkinases$GxGfragend )
genbankkinases$GxGfrag <- GxGfrag
# find GxGxxG
numGxGxxG <- str_count(GxGfrag,  'G[A-Z]G[A-Z]{2}G')
genbankkinases$numGxGxxG <- as.numeric(numGxGxxG)
GxGxxGLoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]{2}G')
GxGxxGLoc <- as.data.frame(GxGxxGLoc)
genbankkinases$GxGxxGLoc <- as.numeric(GxGxxGLoc$start)
genbankkinases$locGxGxxGprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxxGLoc - 1
# find GxGxF
numGxGxF <- str_count(GxGfrag,  'G[A-Z]G[A-Z]F')
genbankkinases$numGxGxF <- as.numeric(numGxGxF)
GxGxFLoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]F')
GxGxFLoc <- as.data.frame(GxGxFLoc)
genbankkinases$GxGxFLoc <- as.numeric(GxGxFLoc$start)
genbankkinases$locGxGxFprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxFLoc - 1
# find GxGxY
numGxGxY <- str_count(GxGfrag,  'G[A-Z]G[A-Z]Y')
genbankkinases$numGxGxY <- as.numeric(numGxGxY)
GxGxYLoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]Y')
GxGxYLoc <- as.data.frame(GxGxYLoc)
genbankkinases$GxGxYLoc <- as.numeric(GxGxYLoc$start)
genbankkinases$locGxGxYprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxYLoc - 1
# find GxFG
numGxFG <- str_count(GxGfrag,  'G[A-Z]FG')
genbankkinases$numGxFG <- as.numeric(numGxFG)
GxFGLoc <- str_locate(GxGfrag, 'G[A-Z]FG')
GxFGLoc <- as.data.frame(GxFGLoc)
genbankkinases$GxFGLoc <- as.numeric(GxFGLoc$start)
genbankkinases$locGxFGprotein <- genbankkinases$GxGfragstart + genbankkinases$GxFGLoc - 3
#above is minus 3 rather than minus 1 to take account of the GxFG starting 2 on from GxGxxG
# find GxGxxA
numGxGxxA <- str_count(GxGfrag,  'G[A-Z]G[A-Z]{2}A')
genbankkinases$numGxGxxA <- as.numeric(numGxGxxA)
GxGxxALoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]{2}A')
GxGxxALoc <- as.data.frame(GxGxxALoc)
genbankkinases$GxGxxALoc <- as.numeric(GxGxxALoc$start)
genbankkinases$locGxGxxAprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxxALoc - 1
# find GxGxxS
numGxGxxS <- str_count(GxGfrag,  'G[A-Z]G[A-Z]{2}S')
genbankkinases$numGxGxxS <- as.numeric(numGxGxxS)
GxGxxSLoc <- str_locate(GxGfrag, 'G[A-Z]G[A-Z]{2}S')
GxGxxSLoc <- as.data.frame(GxGxxSLoc)
genbankkinases$GxGxxSLoc <- as.numeric(GxGxxSLoc$start)
genbankkinases$locGxGxxSprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGxxSLoc - 1
# find SxGxxG
numSxGxxG <- str_count(GxGfrag,  'S[A-Z]G[A-Z]{2}G')
genbankkinases$numSxGxxG <- as.numeric(numSxGxxG)
SxGxxGLoc <- str_locate(GxGfrag, 'S[A-Z]G[A-Z]{2}G')
SxGxxGLoc <- as.data.frame(SxGxxGLoc)
genbankkinases$SxGxxGLoc <- as.numeric(SxGxxGLoc$start)
genbankkinases$locSxGxxGprotein <- genbankkinases$GxGfragstart + genbankkinases$SxGxxGLoc - 1
# find GxxG
numGxxG <- str_count(GxGfrag,  'G[A-Z]{2}G')
genbankkinases$numGxxG <- as.numeric(numGxxG)
GxxGLoc <- str_locate(GxGfrag, 'G[A-Z]{2}G')
GxxGLoc <- as.data.frame(GxxGLoc)
genbankkinases$GxxGLoc <- as.numeric(GxxGLoc$start)
genbankkinases$locGxxGprotein <- genbankkinases$GxGfragstart + genbankkinases$GxxGLoc - 3
# find G4xG
numG4xG <- str_count(GxGfrag,  'G[A-Z]{4}G')
genbankkinases$numG4xG <- as.numeric(numG4xG)
G4xGLoc <- str_locate(GxGfrag, 'G[A-Z]{4}G')
G4xGLoc <- as.data.frame(G4xGLoc)
genbankkinases$G4xGLoc <- as.numeric(G4xGLoc$start)
genbankkinases$locG4xGprotein <- genbankkinases$GxGfragstart + genbankkinases$G4xGLoc - 1
# find GxG
numGxG <- str_count(GxGfrag,  'G[A-Z]G')
genbankkinases$numGxG <- as.numeric(numGxG)
GxGLoc <- str_locate(GxGfrag, 'G[A-Z]G')
GxGLoc <- as.data.frame(GxGLoc)
genbankkinases$GxGLoc <- as.numeric(GxGLoc$start)
genbankkinases$locGxGprotein <- genbankkinases$GxGfragstart + genbankkinases$GxGLoc - 1
# find GxTxF (locates PIK3R4 - need to check it is the correct motif by looking at structure)
numGxTxF <- str_count(GxGfrag,  'G[A-Z]T[A-Z]F')
genbankkinases$numGxTxF <- as.numeric(numGxTxF)
GxTxFLoc <- str_locate(GxGfrag, 'G[A-Z]T[A-Z]F')
GxTxFLoc <- as.data.frame(GxTxFLoc)
genbankkinases$GxTxFLoc <- as.numeric(GxTxFLoc$start)
genbankkinases$locGxTxFprotein <- genbankkinases$GxGfragstart + genbankkinases$GxTxFLoc - 1
# find GG (only use as the last resort to capture AMHRH2 and ANKK1)
numGG <- str_count(GxGfrag, 'GG')
genbankkinases$numGG <- as.numeric(numGG)
GGLoc <- str_locate(GxGfrag, 'GG')
GGLoc <- as.data.frame(GGLoc)
genbankkinases$GGLoc <- as.numeric(GGLoc$start)
genbankkinases$locGGprotein <- genbankkinases$GxGfragstart + genbankkinases$GGLoc - 3
# choose correct GxG
genbankkinases$loc_actual_gxg_A <- ifelse (genbankkinases$numGxGxxG <1, genbankkinases$locGxGxFprotein, genbankkinases$locGxGxxGprotein)
genbankkinases$loc_actual_gxg_B <- genbankkinases$loc_actual_gxg_A
genbankkinases$loc_actual_gxg_C   <- ifelse (genbankkinases$loc_actual_gxg_A %in% NA, genbankkinases$locGxFGprotein, genbankkinases$loc_actual_gxg_B)
genbankkinases$loc_actual_gxg_D <- genbankkinases$loc_actual_gxg_C
genbankkinases$loc_actual_gxg_E   <- ifelse (genbankkinases$loc_actual_gxg_C %in% NA, genbankkinases$locGxGxYprotein, genbankkinases$loc_actual_gxg_D)
genbankkinases$loc_actual_gxg_F <- genbankkinases$loc_actual_gxg_E
genbankkinases$loc_actual_gxg_G   <- ifelse (genbankkinases$loc_actual_gxg_E %in% NA, genbankkinases$locGxGxxAprotein, genbankkinases$loc_actual_gxg_F)
genbankkinases$loc_actual_gxg_H <- genbankkinases$loc_actual_gxg_G
genbankkinases$loc_actual_gxg_I   <- ifelse (genbankkinases$loc_actual_gxg_G %in% NA, genbankkinases$locGxGxxSprotein, genbankkinases$loc_actual_gxg_H)
genbankkinases$loc_actual_gxg_J <- genbankkinases$loc_actual_gxg_I
genbankkinases$loc_actual_gxg_K   <- ifelse (genbankkinases$loc_actual_gxg_I %in% NA, genbankkinases$locSxGxxGprotein, genbankkinases$loc_actual_gxg_J)
genbankkinases$loc_actual_gxg_L <- genbankkinases$loc_actual_gxg_K
genbankkinases$loc_actual_gxg_M   <- ifelse (genbankkinases$loc_actual_gxg_K %in% NA, genbankkinases$locGxxGprotein, genbankkinases$loc_actual_gxg_L)
genbankkinases$loc_actual_gxg_N <- genbankkinases$loc_actual_gxg_M
genbankkinases$loc_actual_gxg_O   <- ifelse (genbankkinases$loc_actual_gxg_M %in% NA, genbankkinases$locG4xGprotein, genbankkinases$loc_actual_gxg_N)
genbankkinases$loc_actual_gxg_P <- genbankkinases$loc_actual_gxg_O
genbankkinases$loc_actual_gxg_Q   <- ifelse (genbankkinases$loc_actual_gxg_O %in% NA, genbankkinases$locGxGprotein, genbankkinases$loc_actual_gxg_P)
genbankkinases$loc_actual_gxg_R <- genbankkinases$loc_actual_gxg_Q
genbankkinases$loc_actual_gxg_S   <- ifelse (genbankkinases$loc_actual_gxg_Q %in% NA, genbankkinases$locGxTxFprotein, genbankkinases$loc_actual_gxg_R)
genbankkinases$loc_actual_gxg_T <- genbankkinases$loc_actual_gxg_S
genbankkinases$loc_actual_gxg   <- ifelse (genbankkinases$loc_actual_gxg_S %in% NA, genbankkinases$locGGprotein, genbankkinases$loc_actual_gxg_T)
#extract GxGxxG motif and location/aa for each
startGxG <- genbankkinases$loc_actual_gxg
endGxG <- genbankkinases$loc_actual_gxg + 5
genbankkinases$GxGxxGmotif <- str_sub(genbankkinases$Protein_Seq, startGxG, endGxG)
genbankkinases$GxGxxG_G1     <- str_sub(genbankkinases$GxGxxGmotif, 1, 1)
genbankkinases$GxGxxG_X1     <- str_sub(genbankkinases$GxGxxGmotif, 2, 2)
genbankkinases$GxGxxG_G2     <- str_sub(genbankkinases$GxGxxGmotif, 3, 3)
genbankkinases$GxGxxG_X2     <- str_sub(genbankkinases$GxGxxGmotif, 4, 4)
genbankkinases$GxGxxG_X3     <- str_sub(genbankkinases$GxGxxGmotif, 5, 5)
genbankkinases$GxGxxG_G3     <- str_sub(genbankkinases$GxGxxGmotif, 6, 6)
genbankkinases$GxGxxG_G1loc   <- genbankkinases$loc_actual_gxg
genbankkinases$GxGxxG_X1loc   <- genbankkinases$loc_actual_gxg + 1
genbankkinases$GxGxxG_G2loc   <- genbankkinases$loc_actual_gxg + 2
genbankkinases$GxGxxG_X2loc   <- genbankkinases$loc_actual_gxg + 3
genbankkinases$GxGxxG_X3loc   <- genbankkinases$loc_actual_gxg + 4
genbankkinases$GxGxxG_G3loc   <- genbankkinases$loc_actual_gxg + 5
genbankkinases$GXGXXG_MOTIF <- paste(genbankkinases$GxGxxG_G1, genbankkinases$GxGxxG_G2, genbankkinases$GxGxxG_G3)
genbankkinases$CATALYTIC_FRAG <- str_sub(genbankkinases$Protein_Seq, genbankkinases$GxGxxG_G1loc, genbankkinases$APE_E1loc )
write.csv (genbankkinases, file ='outputs/TCGAgenbankkinases.csv')
#find salt bridge e
genbankkinases$saltbridgeEfragSTART <- genbankkinases$actual_lysine + 5
genbankkinases$saltbridgeEfragEND <- genbankkinases$actual_lysine + 30
genbankkinases$saltbridgeEfrag <- str_sub(genbankkinases$Protein_Seq, genbankkinases$saltbridgeEfragSTART, genbankkinases$saltbridgeEfragEND )
saltbridgeEfrag <- genbankkinases$saltbridgeEfrag
#find ExxxL
numExxxL <- str_count(saltbridgeEfrag,  'E[A-Z]{3}L')
genbankkinases$numExxxL <- as.numeric(numExxxL)
ExxxLLoc <- str_locate(saltbridgeEfrag,  'E[A-Z]{3}L')
ExxxLLoc <- as.data.frame(ExxxLLoc)
genbankkinases$ExxxLLoc <- as.numeric(ExxxLLoc$start)
genbankkinases$ExxxLLocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$ExxxLLoc - 1
#find ExxI
numExxI <- str_count(saltbridgeEfrag,  'E[A-Z]{2}I')
genbankkinases$numExxI <- as.numeric(numExxI)
ExxILoc <- str_locate(saltbridgeEfrag,  'E[A-Z]{2}I')
ExxILoc <- as.data.frame(ExxILoc)
genbankkinases$ExxILoc <- as.numeric(ExxILoc$start)
genbankkinases$ExxILocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$ExxILoc - 1
#find ExxxM
numExxxM <- str_count(saltbridgeEfrag,  'E[A-Z]{3}M')
genbankkinases$numExxxM <- as.numeric(numExxxM)
ExxxMLoc <- str_locate(saltbridgeEfrag,  'E[A-Z]{3}M')
ExxxMLoc <- as.data.frame(ExxxMLoc)
genbankkinases$ExxxMLoc <- as.numeric(ExxxMLoc$start)
genbankkinases$ExxxMLocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$ExxxMLoc - 1
#find ExxL
numExxL <- str_count(saltbridgeEfrag,  'E[A-Z]{2}L')
genbankkinases$numExxL <- as.numeric(numExxL)
ExxLLoc <- str_locate(saltbridgeEfrag,  'E[A-Z]{2}L')
ExxLLoc <- as.data.frame(ExxLLoc)
genbankkinases$ExxLLoc <- as.numeric(ExxLLoc$start)
genbankkinases$ExxLLocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$ExxLLoc - 1
#find QxxxE
numQxxxE <- str_count(saltbridgeEfrag,  'Q[A-Z]{3}E')
genbankkinases$numQxxxE <- as.numeric(numQxxxE)
QxxxELoc <- str_locate(saltbridgeEfrag,  'Q[A-Z]{3}E')
QxxxELoc <- as.data.frame(QxxxELoc)
genbankkinases$QxxxELoc <- as.numeric(QxxxELoc$start)
genbankkinases$QxxxELocprotein <- genbankkinases$saltbridgeEfragSTART + genbankkinases$QxxxELoc + 3
# choose correct saltbridge
genbankkinases$loc_actual_saltbridge_A <- ifelse (genbankkinases$numExxxL <1, genbankkinases$ExxILocprotein, genbankkinases$ExxxLLocprotein)
genbankkinases$loc_actual_saltbridge_B <- genbankkinases$loc_actual_saltbridge_A
genbankkinases$loc_actual_saltbridge_C   <- ifelse (genbankkinases$loc_actual_saltbridge_A %in% NA, genbankkinases$ExxxMLocprotein, genbankkinases$loc_actual_saltbridge_B)
genbankkinases$loc_actual_saltbridge_D <- genbankkinases$loc_actual_saltbridge_C
genbankkinases$loc_actual_saltbridge_E   <- ifelse (genbankkinases$loc_actual_saltbridge_C %in% NA, genbankkinases$ExxLLocprotein, genbankkinases$loc_actual_saltbridge_D)
genbankkinases$loc_actual_saltbridge_F <- genbankkinases$loc_actual_saltbridge_E
genbankkinases$loc_actual_saltbridge   <- ifelse (genbankkinases$loc_actual_saltbridge_E %in% NA, genbankkinases$QxxxELocprotein, genbankkinases$loc_actual_saltbridge_F)
genbankkinases$checkE <- str_sub(genbankkinases$Protein_Seq, genbankkinases$loc_actual_saltbridge, genbankkinases$loc_actual_saltbridge)
write.csv (genbankkinases, file ='TEMP_genbankkinases.csv')
gene_g <-paste (genbankkinases$Gene, genbankkinases$correctedG, sep = '_' )
genbankkinases$gene_g <-paste (genbankkinases$Gene, genbankkinases$correctedG, sep = '_' )
genbankkinases$DUP= !duplicated(genbankkinases$gene_g)
genbankkinases <- subset(genbankkinases, DUP == 'TRUE')
write.csv (genbankkinases, file ='TEMP_genbankkinases_Gene_G.csv')
#NEW ALIGN SCRIPT
STK11 <- read.csv ( file = 'top30/STK11.csv')
MAP2K4 <- read.csv ( file = 'top30/MAP2K4.csv')
BMPR2 <- read.csv ( file = 'top30/BMPR2.csv')
ACVR2A <- read.csv ( file = 'top30/ACVR2A.csv')
TSSK1B <- read.csv ( file = 'top30/TSSK1B.csv')
STK32A <- read.csv ( file = 'top30/STK32A.csv')
STK24 <- read.csv ( file = 'top30/STK24.csv')
CSNK1A1 <- read.csv ( file = 'top30/CSNK1A1.csv')
MAP3K19 <- read.csv ( file = 'top30/MAP3K19.csv')
NEK5 <- read.csv ( file = 'top30/NEK5.csv')
CSNK1G3 <- read.csv ( file = 'top30/CSNK1G3.csv')
CHEK2 <- read.csv ( file = 'top30/CHEK2.csv')
MAP3K1 <- read.csv ( file = 'top30/MAP3K1.csv')
MAP3K12 <- read.csv ( file = 'top30/MAP3K12.csv')
RIPK3 <- read.csv ( file = 'top30/RIPK3.csv')
DYRK3 <- read.csv ( file = 'top30/DYRK3.csv')
NIM1K <- read.csv ( file = 'top30/NIM1K.csv')
LATS1 <- read.csv ( file = 'top30/LATS1.csv')
FER <- read.csv ( file = 'top30/FER.csv')
EPHA5 <- read.csv ( file = 'top30/EPHA5.csv')
CSNK2A1 <- read.csv ( file = 'top30/CSNK2A1.csv')
TGFBR2 <- read.csv ( file = 'top30/TGFBR2.csv')
NEK11 <- read.csv ( file = 'top30/NEK11.csv')
BRSK1 <- read.csv ( file = 'top30/BRSK1.csv')
EPHA7 <- read.csv ( file = 'top30/EPHA7.csv')
PRKG2 <- read.csv ( file = 'top30/PRKG2.csv')
PAK7 <- read.csv ( file = 'top30/PAK7.csv')
AMHR2 <- read.csv ( file = 'top30/AMHR2.csv')
GSK3B <- read.csv ( file = 'top30/GSK3B.csv')
CDKL3 <- read.csv ( file = 'top30/CDKL3.csv')
TOP30 <- rbind (STK11, MAP2K4, BMPR2, ACVR2A, TSSK1B, STK32A, STK24, CSNK1A1, MAP3K19, NEK5, CSNK1G3, CHEK2, MAP3K1, MAP3K12, RIPK3, DYRK3, NIM1K, LATS1, FER, EPHA5, CSNK2A1, TGFBR2, NEK11, BRSK1, EPHA7, PRKG2, PAK7, AMHR2, GSK3B, CDKL3)
write.csv (TOP30, file='TEMP_TOP30.csv')
#merge with genbank to get location of start of Catalytic frag
TOP30 <- merge(TOP30, genbankkinases, by = 'Gene')
#work out protein location of frag location
TOP30$Codon <- TOP30$Old_Loc + TOP30$loc_actual_gxg - 1
#MERGE WITH CCLE MUTATION DATA
CCLE    <- read.csv ( file = 'SOURCE_ccletrimmed_namechanged_HRT18removed_HEC1Bremoved.csv')
CCLE = subset(CCLE, mutation_type == 'Missense_Mutation')
CCLE$Ref <- str_extract(CCLE$amino_acid_change, "[A-Z]")
CCLE$Codon <- str_extract(CCLE$amino_acid_change, "[0-9]+")
mergedccle <- merge(CCLE, TOP30, by = c('Gene', 'Codon', 'Ref') )
mergedccle$pastedref <- paste(mergedccle$Gene, mergedccle$Codon, mergedccle$Tumor_Sample_Barcode, sep = "_" )
mergedccle$DUP= !duplicated(mergedccle$pastedref)
mergedccle <- subset(mergedccle, DUP == 'TRUE')
write.csv (mergedccle, file='outputs/TEMP_merged_align_ccle.csv')
#look for number of kinases altered per codon
mergedccle$pastedref2 <- paste(mergedccle$Align_Loc, mergedccle$Gene, sep = "_" )
mergedccle$DUP= !duplicated(mergedccle$pastedref2)
mergedcclepk <- subset(mergedccle, DUP == 'TRUE')
write.csv (mergedcclepk, file='outputs/TEMP_merged_align_perkinase_ccle.csv')
freq <-table(mergedcclepk$Align_Loc)
write.csv (freq, file ='outputs/TEMP_freq_perkinase_ccle.csv')
#MERGE WITH TCGA MUTATION DATA
TCGA    <- read.csv ( file = 'SOURCE_allTCGA_jan2016.csv')
TCGA = subset(TCGA, mutation_type == 'Missense_Mutation')
TCGA$Ref <- str_extract(TCGA$amino_acid_change, "[A-Z]")
TCGA$Codon <- str_extract(TCGA$amino_acid_change, "[0-9]+")
mergedtcga <- merge(TCGA, TOP30, by = c('Gene', 'Codon', 'Ref') )
mergedtcga$pastedref <- paste(mergedtcga$Gene, mergedtcga$Codon, mergedtcga$case_id, sep = "_" )
mergedtcga$DUP= !duplicated(mergedtcga$pastedref)
mergedtcga <- subset(mergedtcga, DUP == 'TRUE')
write.csv (mergedtcga, file='outputs/TEMP_merged_align_tcga.csv')
#look for number of kinases altered per codon
mergedtcga$pastedref2 <- paste(mergedtcga$Align_Loc, mergedtcga$Gene, sep = "_" )
mergedtcga$DUP= !duplicated(mergedtcga$pastedref2)
mergedtcgapk <- subset(mergedtcga, DUP == 'TRUE')
write.csv (mergedtcgapk, file='outputs/TEMP_merged_align_perkinase_tcga.csv')
freq <-table(mergedtcgapk$Align_Loc)
write.csv (freq, file ='outputs/TEMP_freq_perkinase_tcga.csv')
# to make a freq table for both ccle and tcga need to merge prior to making a freq table
mergedccletrim <- as.data.frame (mergedcclepk$Gene)
mergedccletrim$Align_Loc <- mergedcclepk$Align_Loc
colnames(mergedccletrim)[1] <- "Gene"
mergedtcgatrim <- as.data.frame (mergedtcgapk$Gene)
mergedtcgatrim$Align_Loc <- mergedtcgapk$Align_Loc
colnames(mergedtcgatrim)[1] <- "Gene"
mergedboth <- rbind (mergedccletrim, mergedtcgatrim)
mergedboth$pastedref3 <- paste(mergedboth$Align_Loc, mergedboth$Gene, sep = "_" )
mergedboth$DUP= !duplicated(mergedboth$pastedref3)
mergedboth <- subset(mergedboth, DUP == 'TRUE')
write.csv (mergedboth, file='outputs/TEMP_merged_align_perkinase_both.csv')
freq <-table(mergedboth$Align_Loc)
write.csv (freq, file ='outputs/TEMP_freq_perkinase_both.csv')
#now work out a conservation score
conserve <- read.csv ( file = 'SOURCE_Top30_rotate.csv')
# first merge each position
conserve$merge <- paste (conserve$STK11, conserve$MAP2K4, conserve$BMPR2, conserve$ACVR2A, conserve$TSSK1B, conserve$STK32A, conserve$STK24, conserve$CSNK1A1, conserve$MAP3K19, conserve$NEK5, conserve$CSNK1G3, conserve$CHEK2, conserve$MAP3K1, conserve$MAP3K12, conserve$RIPK3, conserve$DYRK3, conserve$NIM1K, conserve$LATS1, conserve$FER, conserve$EPHA5, conserve$CSNK2A1, conserve$TGFBR2, conserve$NEK11, conserve$BRSK1, conserve$EPHA7, conserve$PRKG2, conserve$PAK7, conserve$AMHR2, conserve$GSK3B, conserve$CDKL3, sep = ",")
conserve$dash <- str_count(conserve$merge, pattern = "-")
conserve$A <- str_count(conserve$merge, pattern = "A")
conserve$C <- str_count(conserve$merge, pattern = "C")
conserve$D <- str_count(conserve$merge, pattern = "D")
conserve$E <- str_count(conserve$merge, pattern = "E")
conserve$F <- str_count(conserve$merge, pattern = "F")
conserve$G <- str_count(conserve$merge, pattern = "G")
conserve$H <- str_count(conserve$merge, pattern = "H")
conserve$I <- str_count(conserve$merge, pattern = "I")
conserve$K <- str_count(conserve$merge, pattern = "K")
conserve$L <- str_count(conserve$merge, pattern = "L")
conserve$M <- str_count(conserve$merge, pattern = "M")
conserve$N <- str_count(conserve$merge, pattern = "N")
conserve$P <- str_count(conserve$merge, pattern = "P")
conserve$Q <- str_count(conserve$merge, pattern = "Q")
conserve$R <- str_count(conserve$merge, pattern = "R")
conserve$S <- str_count(conserve$merge, pattern = "S")
conserve$T <- str_count(conserve$merge, pattern = "T")
conserve$V <- str_count(conserve$merge, pattern = "V")
conserve$W <- str_count(conserve$merge, pattern = "W")
conserve$Y <- str_count(conserve$merge, pattern = "Y")
conserve$A <- ifelse(conserve$A <1, 0, 1)
conserve$C <- ifelse(conserve$C <1, 0, 1)
conserve$D <- ifelse(conserve$D <1, 0, 1)
conserve$E <- ifelse(conserve$E <1, 0, 1)
conserve$F <- ifelse(conserve$F <1, 0, 1)
conserve$G <- ifelse(conserve$G <1, 0, 1)
conserve$H <- ifelse(conserve$H <1, 0, 1)
conserve$I <- ifelse(conserve$I <1, 0, 1)
conserve$K <- ifelse(conserve$K <1, 0, 1)
conserve$L <- ifelse(conserve$L <1, 0, 1)
conserve$M <- ifelse(conserve$M <1, 0, 1)
conserve$N <- ifelse(conserve$N <1, 0, 1)
conserve$P <- ifelse(conserve$P <1, 0, 1)
conserve$Q <- ifelse(conserve$Q <1, 0, 1)
conserve$R <- ifelse(conserve$R <1, 0, 1)
conserve$S <- ifelse(conserve$S <1, 0, 1)
conserve$T <- ifelse(conserve$T <1, 0, 1)
conserve$V <- ifelse(conserve$V <1, 0, 1)
conserve$W <- ifelse(conserve$W <1, 0, 1)
conserve$Y <- ifelse(conserve$Y <1, 0, 1)
conserve$total <- as.numeric(conserve$A + conserve$C + conserve$D + conserve$E + conserve$F + conserve$G + conserve$H + conserve$I + conserve$K + conserve$L + conserve$M + conserve$N + conserve$P + conserve$Q + conserve$R + conserve$S + conserve$T + conserve$V + conserve$W + conserve$Y)
conserve$score <- ifelse(conserve$dash >5, 20, conserve$total)
conserve$score <- 20 - conserve$score
write.csv (conserve, file='outputs/conserved.csv')
#merge conserved and freq (rougher version)
freqboth <- read.csv ( file = 'TEMP_freq.csv')
cons <- read.csv ( file = 'TEMP_conserved_alt.csv')
mergedscore <- merge(freqboth, cons, by = 'Align_Loc')
write.csv (mergedscore, file='outputs/mergedscore.csv')
# merge with frequency
#conserve <- read.csv ( file = 'SOURCE_conserved_scores.csv')
#align_freq <- read.csv ( file = 'SOURCE_freq_align_mutations_both.csv')
#combinedscore <- merge(conserve, align_freq, by = 'Align_Loc' )
#combinedscore$combo <- as.numeric (combinedscore$Freq * combinedscore$score)
#write.csv (combinedscore, file='output/combinedscore.csv')
#more stringent version
#conserve_merge <- conserve$merge
#conserve <- as.data.frame(conserve$Align_Loc)
#conserve$Merge <- conserve_merge
#colnames(conserve)[1] <- "Align_Loc"
stringentTCGA <- merge (mergedtcga, conserve, by = 'Align_Loc')
write.csv (stringentTCGA, file ='TEMP_check.csv')
stringentTCGA <- stringentTCGA[,c("Align_Loc","Gene","Ref", "case_id", "amino_acid_change", "merge")]
stringentCCLE <- merge (mergedccle, conserve, by = 'Align_Loc')
stringentCCLE <- stringentCCLE[,c("Align_Loc","Gene","Ref", "Tumor_Sample_Barcode", "amino_acid_change", "merge")]
colnames(stringentCCLE)[4] <- "case_id"
write.csv (stringentCCLE, file ='TEMP_check.csv')
stringentCOMBO <- rbind (stringentCCLE, stringentTCGA)
write.csv (stringentCOMBO, file ='TEMP_check.csv')
#identify VAR
stringentCOMBO$Var <- str_sub(stringentCOMBO$amino_acid_change, -1, -1 )
#locate matches
stringentCOMBO$Present  <- str_count(stringentCOMBO$merge,  stringentCOMBO$Var)
write.csv (stringentCOMBO , file='outputs/STRINGENTcombinedscore.csv')
# subset only mutations with Present score of 0 (i.e. var not seen naturally in 20 kinases)
stringentMUTATIONS <- subset (stringentCOMBO, Present == '0')
#remove gene duplications between ccle and tcga
stringentMUTATIONS$pastedref <- paste(stringentMUTATIONS$Align_Loc, stringentMUTATIONS$Gene, sep = "_" )
stringentMUTATIONS$DUP= !duplicated(stringentMUTATIONS$pastedref)
stringentMUTATIONS <- subset(stringentMUTATIONS, DUP == 'TRUE')
write.csv (stringentMUTATIONS , file='outputs/stringentMUTATIONS.csv')
#frequency
freq <-table(stringentMUTATIONS$Align_Loc)
write.csv (freq, file ='TEMP_freq_STRINGENT.csv')
#merge conserved and freq (rougher version)
freqboth <- read.csv ( file = 'TEMP_freq_STRINGENT.csv')
cons <- read.csv ( file = 'TEMP_conserved_alt.csv')
mergedscore <- merge(freqboth, cons, by = 'Align_Loc')
write.csv (mergedscore, file='outputs/mergedscore.csv')
# merge with stringent with conservation
conserve <- read.csv ( file = 'SOURCE_conserved_scores.csv')
stringent_freq <- read.csv ( file = 'SOURCE_freq_stringent_mutations.csv')
combinedSTRINGENTscore <- merge(conserve, stringent_freq, by = 'Align_Loc' )
combinedSTRINGENTscore$combo <- as.numeric (combinedSTRINGENTscore$Freq * combinedSTRINGENTscore$score)
write.csv (combinedSTRINGENTscore, file='output/STRINGENTcombinedscore.csv')
